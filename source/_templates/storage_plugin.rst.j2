{% extends "plugin_base.rst.j2" %}

{% block type %}storage{% endblock %}

{% block usage %}
Queries
^^^^^^^

Queries to this storage should have the following format:

.. list-table::
    :header-rows: 1

    * - Query type
      - Query
      - Description
{% for example in example_queries %}
    * - {{ example["type"] }}
      - ``{{ example["query"] }}``
      - {{ example["desc"] }}
{% endfor %}

As default provider
^^^^^^^^^^^^^^^^^^^
If you want all your input and output (which is not explicitly marked to come from 
another storage) to be written to and read from this storage, you can use it as a 
default provider via:

.. code-block:: bash

    snakemake --default-storage-provider {{ plugin_name }} --default-storage-prefix ...

with ``...`` being the prefix of a query under which you want to store all your 
results.
{% if settings %}
You can also pass custom settings via command line arguments:

.. code-block:: bash

    snakemake --default-storage-provider {{ plugin_name }} --default-storage-prefix ... \
        {% for setting in settings %}
        {{ setting["cliarg"] }} ... {% if not loop.last %}\{% endif %}
        {% endfor %}

{% endif %}

Within the workflow
^^^^^^^^^^^^^^^^^^^

If you want to use this storage plugin only for specific items, you can register it
inside of your workflow::

    # register storage provider (not needed if no custom settings are to be defined here)
    storage:
        provider="{{ plugin_name }}",
        {% if settings %}
        # optionally add custom settings here if needed
        # alternatively they can be passed via command line arguments
        # starting with --storage-{{ plugin_name }}-..., see
        # snakemake --help
        {% for setting in settings %}
        # {{ setting["help"] }}
        {{ setting["name"] }}=...,
        {% endfor %}
        {% endif %}

    rule example:
        input:
            storage.{{ plugin_name }}(
                # define query to the storage backend here
                ...
            ),
        output:
            "example.txt"
        shell:
            "..."

{% if settings %}
Using multiple entities of the same storage plugin
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In case you have to use this storage plugin multiple times, but with different settings
(e.g. to connect to different storage servers), you can register it multiple times,
each time providing a different tag::

    # register shared settings
    storage:
        provider="{{ plugin_name }}",
        # optionally add custom settings here if needed
        # alternatively they can be passed via command line arguments
        # starting with --storage-{{ plugin_name }}-..., see below
        {% for setting in settings %}
        # {{ setting["help"] }}
        {{ setting["name"] }}=...,
        {% endfor %}

    # register multiple tagged entities
    storage foo:
        provider="{{ plugin_name }}",
        # optionally add custom settings here if needed
        # alternatively they can be passed via command line arguments
        # starting with --storage-{{ plugin_name }}-..., see below.
        # To only pass a setting to this tagged entity, prefix the given value with
        # the tag name, i.e. foo:{{ settings[0]["name"] }}=...
        {% for setting in settings %}
        # {{ setting["help"] }}
        {{ setting["name"] }}=...,
        {% endfor %}

    rule example:
        input:
            storage.foo(
                # define query to the storage backend here
                ...
            ),
        output:
            "example.txt"
        shell:
            "..."
{% endif %}
{% endblock %}